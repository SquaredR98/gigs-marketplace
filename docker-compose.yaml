# docker compose up -d redis mongodb mysql postgres rabbitmq elasticsearch kibana
services:
  redis:
    # name of the service - helps tracking the services easily
    container_name: redis
    # alpine is for light weight container
    image: redis:alpine
    # always restart if the container fails
    restart: always
    ports:
      # In yaml this is how we specify a list; <port inside the container>:<port outside the container>
      - 6379:6379
    command: redis-server --loglevel warning
    volumes:
      # we are creating volumes to store the data in container. the syntax says map /data from redis to ./docker/cache directory
      - ./docker-volumes/cache:/data
  mongodb:
    container_name: mongodb
    image: mongo:latest
    restart: always
    ports:
      - 27017:27017
    volumes:
      - ./docker-volumes/data:/data/db
  mysql:
    container_name: mysql
    image: mysql
    # command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_USER: mysql_user
      MYSQL_ROOT_PASSWORD: password@root
      MYSQL_DATABASE: gigs_auth
      MYSQL_PASSWORD: password
    ports:
      - 3306:3306
    volumes:
      - ./docker-volumes/mysql:/var/lib/mysql
  postgres:
    container_name: psql
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres_user
      POSTGRES_DB: gigs_reviews
      POSTGRES_PASSWORD: password
    ports:
      - 5432:5432
    volumes:
      - ./docker-volumes/postgres:/var/lib/postgresql
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:4.1-rc-management-alpine
    restart: always
    environment:
      - RABBITMQ_DEFAULT_USER=rabbitmq
      - RABBITMQ_DEFAULT_PASS=rabbitmq
    ports:
      #AMQP protocol ports
      - 5672:5672
      # Management Ports: For accessing rmq dashboard
      - 15672:15672
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.4
    restart: always
    environment:
      ES_JAVA_OPTS: -Xmx1g -Xms1g
      bootstrap.memory_lock: true
      discovery.type: single-node
      xpack.security.enabled: false
      xpack.security.authc.api_key.enabled: true
      xpack.monitoring.collection.enabled: true
      xpack.security.enrollment.enabled: true
    ports:
      - 9200:9200
    volumes:
      - ./docker-volumes/es-data:/usr/share/elasticsearch/data
    networks:
      - elastic
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.17.4
    restart: always
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
    ports:
      - 5601:5601
    networks:
      - elastic
    volumes:
      - ./kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    depends_on:
      - elasticsearch

networks:
  elastic:
    name: elastic
